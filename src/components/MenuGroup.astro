---
interface Props {
  menu: {
    name: string
    description?: string
    column?: string
    items?: {
      name: string
      description?: string
      price?: string
      type?: string
      options?: string[]
      sizes?: {
        name: string
        price: string
      }[]
    }[]
    sizes?: {
      name: string
      price: string
    }[]
    options?: {
      name: string
      items: string[]
    }[]
  }
}
const { menu } = Astro.props
---

<div
  class="menu-group"
  data-full-width={menu.name === 'Specialty Pizza' ||
    menu.name === 'Breakfast' ||
    menu.name === 'Breakfast Add-Ons'}
  data-right-align={menu.column === 'right'}
>
  <h4>{menu.name}</h4>
  {menu.description && <h5>{menu.description}</h5>}

  {
    menu.sizes && (
      <ul class="price-list">
        {menu.sizes.map((size) => (
          <li>
            <span class="name">{size.name}</span>
            <span class="price">{size.price}</span>
          </li>
        ))}
      </ul>
    )
  }

  <div class="menu-items-container">
    {
      menu.items?.map((item) => (
        <ul
          class="menu-items"
          data-hide-product-name={item.name === 'Pick Two'}
          data-shareable={menu.name === 'Shareables' && item.name === 'Pick Two'}
        >
          <li>
            <span>
              <span class="name">{item.name}</span>
              {item.description && <span class="description">{item.description}</span>}
            </span>
            {item.type === 'multi-select' && (
              <ul class="multi-select">
                {item.options?.map((option) => (
                  <li>{option}</li>
                ))}
              </ul>
            )}
            {item.sizes && (
              <ul class="sizes">
                {item.sizes.map((size) => (
                  <li>
                    <span class="name">{size.name}</span>
                    <span class="price">{size.price}</span>
                  </li>
                ))}
              </ul>
            )}
            {item.price && <span class="price">{item.price}</span>}
          </li>
        </ul>
      ))
    }
  </div>

  <div class="menu-options-container">
    {
      menu.options?.map((option) => (
        <ul class="menu-items">
          <li>
            <span class="name">{option.name}</span>
            <ul class="options">
              {option.items.map((item) => (
                <li>{item}</li>
              ))}
            </ul>
          </li>
        </ul>
      ))
    }
  </div>
</div>

<style>
  .menu-group {
    border: 1px solid var(--primary-color);
    border-radius: var(--border-radius);
    padding: 1rem;
    font-family: 'Montserrat', sans-serif;
    width: calc(50cqw - 0.25rem);
    float: left;
    margin-bottom: 0.5rem;
    margin-right: 0.25rem;

    h4 {
      text-align: center;
      font-family: 'Libre Baskerville', sans-serif;
      font-size: 1.5rem;
      font-weight: bold;
    }

    h5 {
      text-align: center;
      font-weight: normal;
      font-family: 'Montserrat', sans-serif;
      max-width: 80%;
      margin: 0 auto;
    }

    .price-list {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      justify-content: space-around;
      align-items: center;

      li {
        display: flex;
        font-weight: bold;
      }
    }

    .menu-options-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;

      .menu-items {
        width: calc(50% - 0.25rem);

        li {
          display: flex;
          flex-direction: column;
          gap: 0.5rem;
          align-items: flex-start;

          .options {
            font-size: 0.8rem;
          }
        }
      }
    }

    &[data-full-width='true'] {
      width: 100cqw;

      .menu-items-container {
        column-count: 2;
      }
    }

    &[data-right-align='true'] {
      float: right;
      margin-left: 0.25rem;
      margin-right: 0;
    }

    @media (max-width: 900px) {
      width: 100cqw;
      margin-right: 0;
      float: none;

      &[data-right-align='true'] {
        float: none;
        margin-left: 0;
      }

      &[data-full-width='true'] {
        width: 100cqw;

        .menu-items-container {
          column-count: 1;
        }
      }
    }
  }

  .menu-items {
    list-style: none;
    padding: 0;
    margin: 0;

    li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.25rem 0;
      gap: 1rem;
    }

    .description {
      font-size: 0.8rem;
      display: block;
    }

    &[data-hide-product-name='true'] {
      .name {
        display: none;
      }
    }

    &[data-shareable='true'] {
      > li {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: auto 1fr;
        grid-column-gap: 0px;
        grid-row-gap: 0px;
      }

      .multi-select {
        grid-area: 1 / 1 / 3 / 2;
        order: -1;
      }

      .description {
        grid-area: 1 / 2 / 2 / 3;
        justify-self: flex-end;
      }

      .price {
        align-self: flex-start;
        justify-self: flex-end;
        grid-area: 2 / 2 / 3 / 3;
      }
    }

    .multi-select {
      li {
        padding: 0;
      }
    }
  }
</style>
